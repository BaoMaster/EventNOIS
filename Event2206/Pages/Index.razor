@page "/"

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using Event2206.Data.Services
@inject UserService userService;
@inject NavigationManager MyNavigationManager
@using System.Globalization
@using Event2206.Data.Entities;
@inject NavigationManager NavManager

<style>
    .title {
        text-align: center;
        display: flex;
        align-items: center;
    }

    .form-register {
        margin: 0 auto;
        background-color: #eaf0f2c4;
        border-radius: 10px;
        width: 100%;
    }

    .ant-input-sm {
        height: 30px;
        border-radius: 5px
    }

    .ant-form-item-label > label {
        font-size: 18px;
        font-family: 'Roboto', sans-serif;
    }

    .register-container {
        background-image: url(../Image/background.png);
        height: 100vh;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .row-content {
        background: #6176907a;
        border-radius: 10px;
        position: absolute;
        top: 50%;
        transform: translate(0, -50%);
        border: 1px solid;
        padding: 10px;
    }


    .register-content {
        width: 100px;
        height: 100px;
    }

    .ant-form {
        padding: 15px;
    }

    .ant-form-item {
        width: 100%
    }

    .ant-formarginontrol {
        margin: 0 auto
    }

    .ant-btn-primary {
        border-radius: 5px
    }

    .btn-row {
        justify-content: center;
        width: 50%;
        margin: 0 auto;
    }

    @@media (max-width: 992px) {
        .row-content {
            margin: 0 10px;
        }
    }

    @@media (max-width: 380px) {
        .ant-form-item.ant-row {
            margin: 8px;
        }

        .btn-container {
            justify-content: center;
        }
    }

    .btn-row button {
        height: 30px;
        border-radius: 15px;
    }

    .ant-form label {
        font-size: 18px
    }

</style>

<div class="register-container">


    <Row class="row-content">
        <Col Xl=14 class="title">
        <h1>Thân mời quý khách hàng đến tham gia buổi Seminar ngày 22/06/2022</h1>
        </Col>
        <Col Xl=10 class="form-register">
        <Form Loading="loading" Model="@modelRules"
              ValidateMode="@FormValidateMode.Rules"
              ValidateOnChange="@validateOnChange"
              LabelColSpan="6"
              LabelAlign="AntLabelAlignType.Left"
              WrapperColSpan="14"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              Size="@AntSizeLDSType.Small">
            <FormItem Label="Họ và tên" Rules=@(userNameRules)>
                <Input @bind-Value="@context.FullName" />
            </FormItem>
            <FormItem Label="Địa chỉ" Rules=@(addressRules)>
                <Input @bind-Value="@context.Address" />
            </FormItem>
            <FormItem Label="Email" Rules=@(emailRules)>
                <Input @bind-Value="@context.Email" />
            </FormItem>
            <FormItem Label="Số điện thoại" Rules=@(phoneNumberRules)>
                <Input @bind-Value="@context.PhoneNumber" />
            </FormItem>
            <FormItem Label="Tên công ty">
                <Input @bind-Value="@context.CompanyName" />
            </FormItem>
            <FormItem>
                <Checkbox @bind-Value="@context.isNOISCustomer">
                    Khách hàng từ New Ocean IS
                </Checkbox>
            </FormItem>

            <Row class="btn-container">
                <FormItem WrapperColSpan="16" class="btn-row">
                        @*<Button Type="@ButtonType.Primary" HtmlType="submit" Icon="@IconType.Outline.Download" Size="Large" Shape="@ButtonShape.Round">Submit</Button>*@
                    <Button Type="@ButtonType.Primary" HtmlType="submit" Block>Đăng Ký</Button>
                </FormItem>
            </Row>
        </Form>
        </Col>
    </Row>

</div>


@code
{
    public class Person
    {
        [Required]
        public string Name { get; set; }
        public int Age { get; set; } = 2;
    }

    public class UserModel
    {
        public string FullName { get; set; }
        public string Address { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string CompanyName { get; set; }
        public bool isNOISCustomer { get; set; } = false;
    }

    private UserModel modelRules = new UserModel();

    private bool validateOnChange = false;

    private FormValidationRule[] userNameRules = new FormValidationRule[] {
        new FormValidationRule { Required = true , Message="Vui lòng nhập Họ và tên"}
    };

    private FormValidationRule[] addressRules = new FormValidationRule[]{
        new FormValidationRule{ Required = true , Message="Vui lòng nhập Địa chỉ"}
    };


    private FormValidationRule[] emailRules = new FormValidationRule[]{
        new FormValidationRule { Required = true, Message="Vui lòng nhập Email" },
        new FormValidationRule { Type = FormFieldType.Email, Message="Email không hợp lệ" },
    };

    private FormValidationRule[] phoneNumberRules = new FormValidationRule[]{
        new FormValidationRule{ Required = true , Message="Vui lòng nhập Số điện thoại"}
    };



    private async void OnFinish(EditContext editContext)
    {
        toggle(true);
        Console.WriteLine($"Success:{JsonSerializer.Serialize(modelRules)}");

        var model = JsonSerializer.Serialize(modelRules);
        var user = new User()
            {
                Address = modelRules.Address,
                CompanyName = modelRules.CompanyName,
                Email = modelRules.Email,
                FullName = modelRules.FullName,
                PhoneNumber = modelRules.PhoneNumber,
                Created = DateTime.Now,
                isNOISCustomer = modelRules.isNOISCustomer,
            };

        var res = await userService.SaveRecord(user, MyNavigationManager.Uri);
        if (res != null)
        {
            NavManager.NavigateTo("/registered/" + res);
        }

    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelRules)}");
    }

    bool loading = false;

    void toggle(bool value) => loading = value;


}